# meta developer: @CEKPET_AHAHACA

import asyncio
import random

import requests as r
from .. import loader, utils

__version__ = (1, 0, 0)

@loader.tds
class rocketSwapModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–≤–∞–ø–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ tonRocketBot (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥–ª—è–Ω–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)"""
    strings = {"name": "ca_rocketSwap",
                      "config_api-key": "–ê–ø–∏ –∫–ª—é—á",
                      "keyerror": (
                          "üóø"
                      )
                      }

    def __init__(self):
        self.config = loader.ModuleConfig(
        loader.ConfigValue(
            "api-key",
            "",
            lambda: self.strings("config_api-key"),
            validator=loader.validators.Hidden(loader.validators.String())
            )
        )

    async def rocketcfgcmd(self, message):
        """
        This will open the config for the module.
        """
        name = self.strings("name")
        await self.allmodules.commands["config"](
            await utils.answer(message, f"{self.get_prefix()}config {name}")
        )

    async def rswapcmd(self, message):
        """(—Ç–æ–∫–µ–Ω) (sell/buy) (–∫–æ–ª-–≤–æ) - –°–≤–∞–ø–Ω—É—Ç—å —Ç–æ–∫–µ–Ω –≤ –ø–∞—Ä–µ {TOKEN}-TONCOIN (TONCOIN-{TOKEN} –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)"""
        key = self.config["api-key"]
        await utils.answer(message, '<emoji document_id=4965313018326942268>‚¨á</emoji>')
        if key == "":
            await utils.answer(message, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç <a href="https://t.me/ca_modules/11">API –∫–ª—é—á</a>, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—é –≤ –∫–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...')
            await asyncio.sleep(15)
            name = self.strings("name")
            await self.allmodules.commands["config"](
                await utils.answer(message, f"{self.get_prefix()}config {name}")
            )
        else:
            try:
                args = utils.get_args_raw(message)
                if not args:
                    raise ValueError('–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤')
                else:
                    args_list = args.split(" ")
                    token, type, amount = args_list
                    token = token.upper()
                    type = type.upper()
                    amount = float(amount)
                    header = {'Rocket-Exchange-Key': key}
                    data = {
                        "pair": f"{str(token)}-TONCOIN",
                        "type": type,
                        "executeType": "MARKET",
                        "amount": amount,
                        "currency": str(token)
                    }
                    order = r.post('https://trade.ton-rocket.com/orders', data=data, headers=header).json()
                    form = ''
                    await asyncio.sleep(1)
                    orders = r.get(f'https://trade.ton-rocket.com/orders/{order["data"]["orderId"]}', headers=header).json()
                    if order['success']:
                        adm = random.randint(1,6)
                        if adm == 1:
                            a = r.get('https://raw.githubusercontent.com/kukeroff/text/main/adtext').json()['text']
                        else:
                            a = ''
                        form += (
                            '<emoji document_id=5021905410089550576>‚úÖ</emoji> '
                            '–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª –æ—Ä–¥–µ—Ä:\n'
                            f'\n–ê–π–¥–∏: {order["data"]["orderId"]};'
                            f'\n–¢–∏–ø: {order["data"]["type"]};'
                            f'\n–ü–∞—Ä–∞: {order["data"]["pair"]};'
                            f'\n–í—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ {orders["data"]["filled"]}%;'
                            f'\n–ü—Ä–æ–¥–∞–Ω–æ {order["data"]["mainAmount"]-orders["data"]["balance"]["mainAmount"]} {token}.{a}'
                        )
                    else:
                        for i in orders['errors']:
                            form += f'\n–û—à–∏–±–∫–∞:\n> {i["error"]}'
                    await utils.answer(message, form)
            except ValueError:
                await utils.answer(message, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.')
            except Exception as err:
                await utils.answer(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ –∫–æ–Ω—Å–æ–ª—å.')
                print(err)
