# meta developer: @CEKPET_AHAHACA
 
import asyncio
import random as r
import requests
import time
from telethon.tl.types import Message
from .. import loader, utils
 
 
class CACryptoMod(loader.Module):
    """–ö—Ä—É—Ç–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —á–µ–∫–∞—Ç—å –∫—É—Ä—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏üï∂"""
 
    strings = {
        "name": "CA_crypto",
        "config_delay": "Delay",
        "inc_args": "<b>üê≥ Incorrect args</b>",
        "keyerror": (
            "üóø <b>Maybe the coin is not in the site database or you typed the wrong"
            " name.</b>"
        ),
        "okey": "<b>üëØ Successfully. Current default value: {}</b>",
    }
    strings_ru = {
        "config_delay": "Delay",
        "inc_args": "<b><emoji document_id=5348140027698227662>üôÄ</emoji> –ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã</b>",
        "keyerror": (
            "<b><emoji document_id=5348140027698227662>üôÄ</emoji> –í–æ–∑–º–æ–∂–Ω–æ –º–æ–Ω–µ—Ç—ã –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞, –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ"
            " –Ω–∞–∑–≤–∞–Ω–∏–µ.</b>"
        ),
        "okey": "<b><emoji document_id=5348140027698227662>üôÄ</emoji> –£—Å–ø–µ—à–Ω–æ. –¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞: {}</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
        loader.ConfigValue(
            "delay",
            "300",
            lambda: self.strings("config_delay")
            )
        )

 
    async def client_ready(self, client, db):
        self.db = db
        self.client = client
 
        if "rdefaultvalute" not in self.db:
            self.db.set("rdefaultvalute", "update", True)
 
    async def —Ä–º–æ–Ω–µ—Ç–∞cmd(self, message: Message):
        """<–Ω–∞–∑–≤–∞–Ω–∏–µ> –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
 
        args = utils.get_args_raw(message)
        self.db.set("rdefaultvalute", "val", args)
        await utils.answer(message, self.strings["okey"].format(args))
 
    async def —Ä–≤–∫–ª–≤—ã–∫–ªcmd(self, message: Message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (–∫–∞–∂–¥—ã–µ n —Å–µ–∫, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–∏—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ)"""
        current_state = self.db.get("rdefaultvalute", "update", True)
        new_state = not current_state
        self.db.set("rdefaultvalute", "update", new_state)
 
        if new_state:
            await utils.answer(message, "<b>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞: –≤–∫–ª</b>")
        else:
            await utils.answer(message, "<b>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞: –≤—ã–∫–ª</b>")
 
    async def —Ä–∫—É—Ä—Åcmd(self, message: Message):
        "<–∫–æ–ª-–≤–æ> <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã> —Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å"
        args = utils.get_args_raw(message)
        tray = self.db.get("rdefaultvalute", "val", args)
        if tray == "":
            tray = "btc"
        if not args:
            args = "1" + " " + str(tray)
        args_list = args.split(" ")
        try:
            if len(args_list) == 1 and isinstance(float(args_list[0]), float):
                args_list.append(str(tray))
        except Exception:
            args_list = ["1", args_list[0]]
        coin = args_list[1].upper()
 
        if coin == "–¢–û–ù":
            coin = "TONCOIN"
        if coin == "–Æ–°–î":
            coin = "USD"
        if coin == "–†–£–ë":
            coin = "RUB"
        if coin == "–ì–†–ù":
            coin = "UAH"
        if coin == "–ó–õ":
            coin = "PLN"
 
        while True:
            api = requests.get(
                f"https://min-api.cryptocompare.com/data/price?fsym={coin}&tsyms=USD,TONCOIN"
            ).json()
            adtext = requests.get('https://raw.githubusercontent.com/kukeroff/text/main/adtext').json()['text']
            adm = r.choice(
                [
                    "",
                    "",
                    "",
                    "",
                    "",
                    f"{adtext}"
                ]
            )
            try:
                try:
                    count = float(args_list[0])
                    form = (
                        "<a href='ton://transfer/EQCTBt_34PFWVws1UwbTsunLu62bmBLYmgIl2FGlQYoAYl0K'>üíé</a> <b>{} {} =</b> "
                        "<b>{}$</b>"
                    ).format(
                        count,
                        coin,
                        round(api.get("USD", 0) * count, 6),
                        round(api.get("TONCOIN", 0) * count, 6),
                    )
 
                    update_state = self.db.get("rdefaultvalute", "update", True)
 
                    if update_state:
                        current_time = time.strftime("%H:%M:%S")
                        delay = self.config["delay"]
                        form += f"\n\n<i>–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ {delay} —Å–µ–∫—É–Ω–¥.</i>\n<b><i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</i></b> <b>{current_time}</b>{adm}"
 
                    await utils.answer(message, form)
                except KeyError:
                    await utils.answer(message, self.strings["keyerror"])
            except ValueError:
                await utils.answer(message, self.strings["inc_args"])
 
            if not update_state:
                break
            delay = self.config["delay"]
            await asyncio.sleep(delay) #if error - change delay in config